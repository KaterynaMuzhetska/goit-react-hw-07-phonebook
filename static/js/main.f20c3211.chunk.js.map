{"version":3,"sources":["components/ContactListItem/contactListItem.module.css","App.module.css","components/Filter/filter.module.css","components/ContactList/contactList.module.css","components/ContactForm/ContactForm.module.css","redux/contacts/contacts-action.js","redux/contacts/contacts-operations.js","redux/contacts/contacts-selectors.js","components/ContactForm/ContactForm.js","components/ContactListItem/ContactListItem.js","components/ContactList/ContactList.js","components/Filter/Filter.js","App.js","redux/contacts/contacts-reduser.js","redux/store.js","index.js"],"names":["module","exports","fetchContactsRequest","createAction","fetchContactsSuccess","fetchContactsError","addContactRequest","addContactSuccess","addContactError","deleteContactRequest","deleteContactSuccess","deleteContactError","changeFilter","axios","defaults","baseURL","dispatch","get","then","data","catch","error","name","number","contact","post","contactId","delete","getContacts","state","contacts","items","getFilter","filter","isContactLoading","loading","getVisibleContacts","createSelector","normalizedFilter","toLowerCase","includes","ContactForm","useSelector","useDispatch","useState","setName","setNumber","handleChange","e","target","value","onSubmit","contactName","preventDefault","some","alert","contactsOperations","className","styles","form","formLabel","formInput","type","pattern","title","required","onChange","buttonSubmit","ContactListItem","id","onDeletContact","contactListItem","buttonDelete","onClick","ContactList","contactList","map","Filter","filterLabel","filterInput","contactsAction","App","isLoadingContacts","useEffect","container","subtitle","color","height","width","createReducer","_","payload","combineReducers","store","configureStore","reducer","contactsReducers","middleware","getDefaultMiddleware","serializableCheck","ignoredActions","FLUSH","REHYDRATE","PAUSE","PERSIST","PURGE","REGISTER","concat","logger","devTools","process","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f20c3211.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactListItem\":\"contactListItem_contactListItem__3hd0B\",\"contact\":\"contactListItem_contact__Ny_3r\",\"buttonDelete\":\"contactListItem_buttonDelete__2tOBg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"App_container__qdaE4\",\"title\":\"App_title__Fdpjf\",\"subtitle\":\"App_subtitle__32jc0\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"filterLabel\":\"filter_filterLabel__1mkGR\",\"filterInput\":\"filter_filterInput__2fEgR\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"contactList\":\"contactList_contactList__X91q1\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__3Fd3a\",\"formLabel\":\"ContactForm_formLabel__3ETmQ\",\"formInput\":\"ContactForm_formInput__27jo6\",\"buttonSubmit\":\"ContactForm_buttonSubmit__2ZXYc\"};","// Модули\r\nimport { createAction } from '@reduxjs/toolkit';\r\n\r\n\r\nexport const fetchContactsRequest = createAction('contacts/fetchContactsRequest');\r\nexport const fetchContactsSuccess = createAction('contacts/fetchContactsSuccess');\r\nexport const fetchContactsError = createAction('contacts/fetchContactsError');\r\n\r\nexport const addContactRequest = createAction('contacts/addContactRequest');\r\nexport const addContactSuccess = createAction('contacts/addContactSuccess');\r\nexport const addContactError = createAction('contacts/addContactError');\r\n\r\nexport const deleteContactRequest = createAction('contacts/deleteContactRequest');\r\nexport const deleteContactSuccess = createAction('contacts/deleteContactSuccess');\r\nexport const deleteContactError = createAction('contacts/deleteContactError');\r\n\r\nexport const changeFilter = createAction('contacts/changeFilter');\r\n","// Модули\r\nimport axios from 'axios';\r\n\r\n// Компоненты\r\nimport {\r\n    addContactRequest,\r\n    addContactSuccess,\r\n    addContactError,\r\n    deleteContactRequest,\r\n    deleteContactSuccess,\r\n    deleteContactError,\r\n    fetchContactsRequest,\r\n    fetchContactsSuccess,\r\n    fetchContactsError,\r\n} from './contacts-action';\r\n\r\n\r\naxios.defaults.baseURL = 'http://localhost:3000';\r\n\r\nconst fetchContacts = () => dispatch => {\r\n    dispatch(fetchContactsRequest());\r\n\r\n    axios\r\n        .get('/contacts')\r\n        .then(({ data }) => dispatch(fetchContactsSuccess(data)))\r\n        .catch(error => dispatch(fetchContactsError(error)));\r\n};\r\n\r\nconst addContact = ({ name, number }) => dispatch => {\r\n    const contact = {\r\n        name,\r\n        number,\r\n    };\r\n\r\n    dispatch(addContactRequest());\r\n\r\n    axios\r\n        .post('/contacts', contact)\r\n        .then(({ data }) => dispatch(addContactSuccess(data)))\r\n        .catch(error => dispatch(addContactError(error)));\r\n};\r\n\r\nconst deleteContact = contactId => dispatch => {\r\n    dispatch(deleteContactRequest());\r\n    \r\n    axios\r\n        .delete(`/contacts/${contactId}`)\r\n        .then(({ data }) => dispatch(deleteContactSuccess(contactId)))\r\n        .catch(error => dispatch(deleteContactError(error)));\r\n};\r\n\r\n// eslint-disable-next-line\r\nexport default {\r\n    fetchContacts,\r\n    addContact,\r\n    deleteContact,\r\n};","// Модули\r\nimport { createSelector } from \"reselect\";\r\n\r\n\r\nexport const getContacts = state => state.contacts.items;\r\nexport const getFilter = state => state.contacts.filter;\r\nexport const isContactLoading = state => state.contacts.loading;\r\n\r\nexport const getVisibleContacts = createSelector(\r\n    [getContacts, getFilter],\r\n    (contacts, filter) => {\r\n        const normalizedFilter = filter.toLowerCase();\r\n\r\n        return contacts.filter(contact =>\r\n            contact.name.toLowerCase().includes(normalizedFilter),\r\n        );\r\n    });\r\n\r\n// export const getVisibleContacts = state => {\r\n//     const contacts = getContacts(state);\r\n//     const filter = getFilter(state);\r\n//     const normalizedFilter = filter.toLowerCase();\r\n\r\n//     return contacts.filter(contact =>\r\n//         contact.name.toLowerCase().includes(normalizedFilter),\r\n//     );\r\n// };","import { useState } from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport contactsOperations from '../../redux/contacts/contacts-operations';\r\nimport { getContacts } from '../../redux/contacts/contacts-selectors';\r\n\r\nimport styles from '../ContactForm/ContactForm.module.css';\r\n\r\nexport default function ContactForm() {\r\n  const contacts = useSelector(getContacts);\r\n  const dispatch = useDispatch();\r\n\r\n  const [name, setName] = useState('');\r\n  const [number, setNumber] = useState('');\r\n\r\n  const handleChange = e => {\r\n    const { name, value } = e.target;\r\n\r\n    switch (name) {\r\n      case 'name':\r\n        setName(value);\r\n        break;\r\n\r\n      case 'number':\r\n        setNumber(value);\r\n        break;\r\n\r\n      default:\r\n        return;\r\n    }\r\n  };\r\n\r\n  const findByName = contactName => {\r\n    return contacts.some(({ name }) => name === contactName);\r\n  };\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n\r\n    if (findByName(name)) {\r\n      alert(`${name} is already in contacts!`);\r\n      return;\r\n    }\r\n\r\n    dispatch(contactsOperations.addContact({ name, number }));\r\n\r\n    setName('');\r\n    setNumber('');\r\n  };\r\n\r\n  return (\r\n    <form onSubmit={handleSubmit} className={styles.form}>\r\n      <label className={styles.formLabel}>\r\n        Name\r\n        <input\r\n          className={styles.formInput}\r\n          type=\"text\"\r\n          name=\"name\"\r\n          pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n          title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n          required\r\n          value={name}\r\n          onChange={handleChange}\r\n        />\r\n      </label>\r\n      <label className={styles.formLabel}>\r\n        Number\r\n        <input\r\n          className={styles.formInput}\r\n          type=\"tel\"\r\n          name=\"number\"\r\n          pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n          title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n          required\r\n          value={number}\r\n          onChange={handleChange}\r\n        />\r\n      </label>\r\n\r\n      <button type=\"submit\" className={styles.buttonSubmit}>\r\n        Add contact\r\n      </button>\r\n    </form>\r\n  );\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nimport styles from '../ContactListItem/contactListItem.module.css';\r\n\r\nconst ContactListItem = ({ name, number, id, onDeletContact }) => {\r\n  return (\r\n    <li className={styles.contactListItem}>\r\n      <p className={styles.contact}>\r\n        {' '}\r\n        {name}: {number}\r\n      </p>\r\n      <button\r\n        className={styles.buttonDelete}\r\n        type=\"button\"\r\n        onClick={() => onDeletContact(id)}\r\n      >\r\n        Delete\r\n      </button>\r\n    </li>\r\n  );\r\n};\r\n\r\nContactListItem.propTypes = {\r\n  id: PropTypes.number.isRequired,\r\n  name: PropTypes.string.isRequired,\r\n  number: PropTypes.string.isRequired,\r\n  onDeletContact: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactListItem;\r\n","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport ContactListItem from '../ContactListItem/ContactListItem';\r\nimport contactsOperations from '../../redux/contacts/contacts-operations';\r\nimport { getVisibleContacts } from '../../redux/contacts/contacts-selectors';\r\n\r\nimport styles from '../ContactList/contactList.module.css';\r\n\r\nconst ContactList = () => {\r\n  const contacts = useSelector(getVisibleContacts);\r\n  const dispatch = useDispatch();\r\n  const onDeletContact = id => dispatch(contactsOperations.deleteContact(id));\r\n\r\n  return (\r\n    <ul className={styles.contactList}>\r\n      {contacts.map(({ id, name, number }) => (\r\n        <ContactListItem\r\n          key={id}\r\n          id={id}\r\n          name={name}\r\n          number={number}\r\n          onDeletContact={() => onDeletContact(id)}\r\n        />\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nexport default ContactList;\r\n","import React from 'react';\r\nimport { useSelector, useDispatch } from 'react-redux';\r\n\r\nimport * as contactsAction from '../../redux/contacts/contacts-action';\r\nimport { getFilter } from '../../redux/contacts/contacts-selectors';\r\n\r\nimport styles from '../Filter/filter.module.css';\r\n\r\nconst Filter = () => {\r\n  const value = useSelector(getFilter);\r\n  const dispatch = useDispatch();\r\n  const onChange = e => dispatch(contactsAction.changeFilter(e.target.value));\r\n\r\n  return (\r\n    <label className={styles.filterLabel}>\r\n      Find contacts by name\r\n      <input\r\n        className={styles.filterInput}\r\n        type=\"text\"\r\n        name=\"filter\"\r\n        value={value}\r\n        onChange={onChange}\r\n      />\r\n    </label>\r\n  );\r\n};\r\n\r\nexport default Filter;\r\n","import { useSelector, useDispatch } from 'react-redux';\r\nimport { useEffect } from 'react';\r\n\r\nimport ContactForm from './components/ContactForm';\r\nimport ContactList from './components/ContactList';\r\nimport Filter from './components/Filter';\r\nimport contactsOperations from './redux/contacts/contacts-operations';\r\nimport Loader from 'react-loader-spinner';\r\nimport { isContactLoading } from './redux/contacts/contacts-selectors';\r\n\r\nimport styles from './App.module.css';\r\n\r\nconst App = () => {\r\n  const isLoadingContacts = useSelector(isContactLoading);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(contactsOperations.fetchContacts());\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <div className={styles.container}>\r\n      <h1 className={styles.title}>Phonebook</h1>\r\n      <ContactForm />\r\n      <h2 className={styles.subtitle}>Contacts</h2>\r\n      <Filter />\r\n      {isLoadingContacts && (\r\n        <Loader type=\"ThreeDots\" color=\"#00BFFF\" height={80} width={80} />\r\n      )}\r\n      <ContactList />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","// Модули\r\nimport { combineReducers } from 'redux';\r\nimport { createReducer } from '@reduxjs/toolkit';\r\n\r\n// Компоненты\r\nimport {\r\n    addContactRequest,\r\n    addContactSuccess,\r\n    addContactError,\r\n    deleteContactRequest,\r\n    deleteContactSuccess,\r\n    deleteContactError,\r\n    fetchContactsRequest,\r\n    fetchContactsSuccess,\r\n    fetchContactsError,\r\n    changeFilter\r\n} from './contacts-action';\r\n\r\n\r\nconst items = createReducer([], {\r\n    [fetchContactsSuccess]:(_, { payload }) =>payload,\r\n    [addContactSuccess]: (state, { payload }) => [...state, payload],\r\n    [deleteContactSuccess]: (state, { payload }) => state.filter(({ id }) => id !== payload),\r\n});\r\n\r\nconst loading = createReducer(false, {\r\n    [fetchContactsRequest]: () => true,\r\n    [fetchContactsSuccess]: () => false,\r\n    [fetchContactsError]: () => false,\r\n    [addContactRequest]: () => true,\r\n    [addContactSuccess]: () => false,\r\n    [addContactError]: () => false,\r\n    [deleteContactRequest]: () => true,\r\n    [deleteContactSuccess]: () => false,\r\n    [deleteContactError]: () => false,\r\n});\r\n\r\nconst filter = createReducer('', {\r\n    [changeFilter]: (_, { payload }) => payload,\r\n});\r\n\r\n\r\nexport default combineReducers({\r\n    items,\r\n    filter,\r\n    loading,\r\n});\r\n\r\n","// Модули\r\nimport { configureStore } from '@reduxjs/toolkit';\r\nimport logger from 'redux-logger';\r\nimport {\r\n  // persistStore,\r\n  FLUSH,\r\n  REHYDRATE,\r\n  PAUSE,\r\n  PERSIST,\r\n  PURGE,\r\n  REGISTER,\r\n} from 'redux-persist';\r\n\r\n\r\n// Компоненты\r\nimport contactsReducers from './contacts/contacts-reduser';\r\n\r\n\r\nconst middleware = (getDefaultMiddleware) => getDefaultMiddleware({\r\n  serializableCheck: {\r\n    ignoredActions: [FLUSH, REHYDRATE, PAUSE, PERSIST, PURGE, REGISTER],\r\n  },\r\n}).concat(logger);\r\n\r\n\r\n\r\nconst store = configureStore({\r\n  reducer: {\r\n    contacts: contactsReducers,\r\n  },\r\n  middleware,\r\n  devTools: process.env.NODE_ENV === 'development',\r\n});\r\n\r\n// const persistor = persistStore(store);\r\n\r\n\r\n// eslint-disable-next-line\r\n// export default {store, persistor};\r\n\r\nexport default store\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\n\r\nimport App from './App';\r\nimport store from './redux/store';\r\n\r\nimport 'modern-normalize/modern-normalize.css';\r\nimport 'react-loader-spinner/dist/loader/css/react-spinner-loader.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n      <App />\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById('root'),\r\n);\r\n"],"sourceRoot":""}